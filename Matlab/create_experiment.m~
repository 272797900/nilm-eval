% This file is part of the project NILM-Eval (https://github.com/beckel/nilm-eval).
% Licence: GPL 2.0 (http://www.gnu.org/licenses/gpl-2.0.html)
% Copyright: ETH Zurich, 2014
% Author: Romano Cicchetti

function create_experiment()

    configuration_input = 'weiss_initial.yaml';
    experiment_input = 'weiss/2014-07-01-r.yaml';
    experiment_name = '2014-07-01-weiss-r';
    
    % load values of configuration and experiment
    configuration = ReadYaml(['input/configurations/', configuration_input]);
    experiment = ReadYaml(['input/experiments/', experiment_input]);
    
    % prepare experiment struct
    field_names = fieldnames(configuration);
    experiment_parameters = {};
    experiment_values = {};
    for field_name = field_names'
        % if field is specified in experiment (and is not empty):
        % use these values instead of the values from the configuration
        if isfield(experiment, field_name) && ~isempty(experiment.(field_name{1}))
            values = experiment.(field_name{1});
            if length(values) == 1
                setup.(field_name{1}) = cell2mat(values);
            else
                experiment_parameters{end+1} = field_name{1};
                experiment_values{end+1} = values;
            end
        
        % Otherwise: Use the value from the default configuration
        else
            value = configuration.(field_name{1});
            if isempty(value) || iscell(value)
                error('Ecactly one value must be specified in the default configuration (not a cell).');
            end
            setup.(field_name{1}) = value;
        end
    end
    

return;

    % create folder to store the setup files
    path_to_experiment_setups = strcat('input/autogen/experiments/setups/', algorithm, '_', configuration, '/', experiment_name);
    path_to_experiment_results = strcat('results/', algorithm, '_', configuration, '/', experiment_name); 
    if exist(path_to_experiment_setups) || exist(path_to_experiment_results)
       error('set a unique experiment name or extend an existing experiment') 
    end
    mkdir(path_to_experiment_setups);
    
    % set name of algorithm, name of default configuration and experiment
    % name
    setup.algorithm = algorithm;
    setup.configuration = configuration;
    setup.experiment = experiment_name;
    
    % create the setup files
    create_setup_files(experiment_parameters, experiment_values, setup, '', 1, path_to_experiment_setups) 
    
    % store the yaml file that defines the experiment
    path_to_experiment_yaml = strcat('input/autogen/experiments/yaml/', algorithm, '_', configuration);
    mkdir(path_to_experiment_yaml);
    copyfile(yaml_file, strcat(path_to_experiment_yaml, '/', experiment_name, '.yaml'));



